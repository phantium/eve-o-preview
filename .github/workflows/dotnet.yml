name: Build EVE-O-Preview
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Release]

    runs-on: windows-latest  # For a list of available runner types, refer to 
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: src/EVE-O-Preview.sln

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: build the application
      run: msbuild $env:Solution_Name /p:Platform="Any CPU"

    # Create the app package by building and packaging the Windows Application Packaging project
    # - name: Create the app package
    #   run: msbuild $env:Wap_Project_Path /bl:logfile=wap.$env:Configuration.$env:Platform.binlog /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificatePassword=${{ secrets.Pfx_Key }} /p:AppInstallerUri=$env:AppInstallerUri /p:RuntimeIdentifiers=`"win-x64`;win-x86`;win10-x64-aot`;win10-x86-aot`"
    #   env:
    #     Appx_Bundle: Always
    #     Appx_Bundle_Platforms: x64|x86
    #     Appx_Package_Build_Mode: StoreUpload
    #     Configuration: ${{ matrix.configuration }}
    #     Platform: ${{ matrix.platform }}
    #     AppInstallerUri: https://msdn.microsoft.com

    - name: Upload msbuild log
      uses: actions/upload-artifact@v4
      with:
        name: WinForms-MSBuildLogs
        path: '**/*.binlog'
      if: ${{ success() || failure() }}
